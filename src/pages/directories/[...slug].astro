---
import RootLayout from '@/layouts/RootLayout.astro';
import Header from '@/composites/Header.astro';
import BottomFloatingLayout from '@/layouts/BottomFloatingLayout.astro';
import Markdown from '@/components/Markdown';
import LeftSidebarAndMainLayout from '@/layouts/LeftSidebarAndMainLayout.astro';
import ThemeChanger from '@/composites/ThemeChanger.astro';
import VerticalBreadcrumbs from '@/components/VerticalBreadcrumbs';
import {
  getParentPath,
  isChildPath,
  getAllArticles,
  getAllDirectories,
  createBreadcrumbs,
} from '@/utils/pathUtil';
import type { Article, Directory } from '@/types/file';

export async function getStaticPaths() {
  const allDirectories = getAllDirectories();
  const allArticles = getAllArticles();
  return allDirectories.map(({ path, title, Content, rawContent }) => ({
    params: {
      slug: path
    },
    props: {
      pathNode: {
        path,
        parentPath: getParentPath(path),
      },
      directory: {
        title,
        Content,
        rawContent,
      },
      allDirectories,
      allArticles,
    },
  }));
}

const { pathNode, directory, allDirectories, allArticles } = Astro.props;
const childDirectories = allDirectories.filter((currentDirectory: Directory) => isChildPath(pathNode.path, currentDirectory.path ?? ''));
const childArticles = allArticles.filter((currentArticle: Article) => isChildPath(pathNode.path, currentArticle.path));
const breadcrumbs = createBreadcrumbs(pathNode.path)
---

<RootLayout title={`${directory.title} - snapperbay4453`}>
  <Header />
  <LeftSidebarAndMainLayout>
    <div slot='left-sidebar'>
      <VerticalBreadcrumbs
        basePath='/directories'
        breadcrumbs={breadcrumbs}
        client:visible
      />
    </div>
    <section>
      <Markdown
        rawContent={directory.rawContent}
        client:load
      />
      
      <div class='mt-8'>
        {pathNode.path && (
          <ol class='mt-4'>
            <li class='mt-2 first:mt-0'>
              <a
                class='flex items-center gap-2 text-lg'
                href={`/directories${pathNode.parentPath ? '/' : ''}${pathNode.parentPath}`}
              >
                <i class='icon-[material-symbols--arrow-back-rounded] text-inherit'></i>
                <span>상위 디렉토리</span>
              </a>
            </li>
          </ol>
        )}

        <ol class='mt-4'>
          {childDirectories.map((childDirectory: Directory) => (
            <li class='mt-2 first:mt-0'>
              <a
                class='flex items-center gap-2 text-lg'
                href=`/directories/${childDirectory.path}`
              >
                <i class='icon-[material-symbols--folder-outline-rounded] text-inherit'></i>
                <span>{childDirectory.title}</span>
              </a>
            </li>
          ))}
        </ol>
    
        <ol class='mt-4'>
          {childArticles.map((childArticle: Article) => (
            <li class='mt-2 first:mt-0'>
              <a
                class='flex items-center gap-2 text-lg'
                href=`/articles/${childArticle.path}`
              >
                <i class='icon-[material-symbols--lab-profile-outline-rounded] text-inherit'></i>
                {childArticle.title}
              </a>
            </li>
          ))}
        </ol>

        {[...childDirectories, ...childArticles].length === 0 && (
          '이 위치에서 표시할 정보가 없습니다.'
        )}
      </div>
    </section>
  </LeftSidebarAndMainLayout>
  <BottomFloatingLayout>
    <div slot='right'>
      <ThemeChanger />
    </div>
  </BottomFloatingLayout>
</RootLayout>
