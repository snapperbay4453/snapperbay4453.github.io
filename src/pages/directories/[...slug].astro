---
import Layout from '@/layouts/Layout.astro';
import Header from '@/composites/Header.astro';
import Markdown from '@/composites/Markdown';
import Card from '@/components/Card';
import LeftSidebarAndMain from '@/components/LeftSidebarAndMain.astro';
import VerticalBreadcrumbs from '@/components/VerticalBreadcrumbs.astro';
import WidthLimiter from '@/components/WidthLimiter.astro';
import {
  getParentPath,
  isChildPath,
  getAllArticles,
  getAllDirectories,
  createBreadcrumbs,
} from '@/utils/pathUtil';
import type { Article, Directory } from '@/types/file';

import IconArrowBackRounded from '~icons/material-symbols/arrow-back-rounded';
import IconFolderOutlineRounded from '~icons/material-symbols/folder-outline-rounded';
import IconLabProfileOutlineRounded from '~icons/material-symbols/lab-profile-outline-rounded';

export async function getStaticPaths() {
  const allDirectories = getAllDirectories();
  const allArticles = getAllArticles();
  return allDirectories.map(({ path, title, Content, rawContent }) => ({
    params: {
      slug: path
    },
    props: {
      pathNode: {
        path,
        parentPath: getParentPath(path),
      },
      directory: {
        title,
        Content,
        rawContent,
      },
      allDirectories,
      allArticles,
    },
  }));
}

const { pathNode, directory, allDirectories, allArticles } = Astro.props;
const childDirectories = allDirectories.filter((currentDirectory: Directory) => isChildPath(pathNode.path, currentDirectory.path ?? ''));
const childArticles = allArticles.filter((currentArticle: Article) => isChildPath(pathNode.path, currentArticle.path));
const breadcrumbs = createBreadcrumbs(pathNode.path)
---

<Layout title='Welcome to Astro.'>
  <Header />
  <WidthLimiter>
    <LeftSidebarAndMain>
      <div slot='left-sidebar'>
        <VerticalBreadcrumbs
          basePath='/directories'
          breadcrumbs={breadcrumbs}
          client:visible
        />
      </div>
      <section>
        <Card>
          <Markdown
            rawContent={directory.rawContent}
            client:load
          />
        </Card>
        
        {pathNode.path && (

          <ol class='mt-4'>
            <li class='mt-2 first:mt-0'>
              <a
                class='text-lg'
                href={`/directories${pathNode.parentPath ? '/' : ''}${pathNode.parentPath}`}
              >
                <IconArrowBackRounded
                  style={{ display: 'inline-block', color: 'black' }}
                />
                <span>뒤로가기</span>
              </a>
            </li>
          </ol>
        )}

        <ol class='mt-4'>
          {childDirectories.map((childDirectory: Directory) => (
            <li class='mt-2 first:mt-0'>
              <a
                class='text-lg'
                href=`/directories/${childDirectory.path}`
              >
                <IconFolderOutlineRounded
                  style={{ display: 'inline-block', color: 'black' }}
                />
                {childDirectory.title}
              </a>
            </li>
          ))}
        </ol>
    
        <ol class='mt-4'>
          {childArticles.map((childArticle: Article) => (
            <li class='mt-2 first:mt-0'>
              <a
                class='text-lg'
                href=`/articles/${childArticle.path}`
              >
                <IconLabProfileOutlineRounded
                  style={{ display: 'inline-block', color: 'black' }}
                />
                {childArticle.title}
              </a>
            </li>
          ))}
        </ol>

        {[...childDirectories, ...childArticles].length === 0 && (
          '이 위치에서 표시할 정보가 없습니다.'
        )}
      </section>
    </LeftSidebarAndMain>
  </WidthLimiter>
</Layout>
